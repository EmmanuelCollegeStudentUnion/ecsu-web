# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
    build:
        docker:
        # specify the version you desire here
        - image: circleci/node:10.14
        
        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
        # - image: circleci/mongo:3.4.4

        working_directory: ~/repo

        steps:
            - checkout
            - run:
                command: curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            - run:
                command: sudo apt-get install git-lfs --upgrade
            - run:
                command: sudo chown -R circleci:circleci /usr/local/bin
                    
            - run: |
                git lfs install --force
                git lfs pull


            # Download and cache dependencies
            - restore_cache:
                keys:
                - v2-dependencies-{{ checksum "yarn.lock" }}
                # fallback to using the latest cache if no exact match is found
                - v2-dependencies-

            - run: yarn install --frozen-lockfile

            - save_cache:
                paths:
                    - node_modules
                key: v2-dependencies-{{ checksum "yarn.lock" }}
                
            - run:
                name: Generate
                command:
                    yarn build

            - run:
                name: Generate webp images
                command:
                    yarn webp
            
            - save_cache:
                paths:
                    - dist
                key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
    upload:
        machine:
            enabled: true
        steps:    
            - restore_cache:
                key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
            - run:
                name: Create archive
                command: |
                    cd ~/repo 
                    tar -czvf /tmp/deploy.tar.gz ./dist
            - run:
                name: Upload
                command: |
                    ssh nh487@shell.srcf.net "rm -f ~/deploy/artifacts/*"
                    scp /tmp/deploy.tar.gz nh487@files.srcf.net:~/deploy/artifacts/$CIRCLE_SHA1.tar.gz
    
    deployStaging:
        machine:
            enabled: true
        steps:
            - run:
                name: Deploy staging
                command: |
                    ssh nh487@shell.srcf.net "~/deploy/deploy.sh ~/deploy/artifacts/$CIRCLE_SHA1.tar.gz"
                                    
    deployProduction:
        machine:
            enabled: true
        steps:
            - run:
                name: Deploy into production
                command: |
                    ssh nh487@shell.srcf.net "~/deploy/deploy-PRODUCTION.sh ~/artifacts/$CIRCLE_SHA1.tar.gz"


    rollbarStaging:
        machine:
            enabled: true
        steps:
            - run:
                name: Deployment notification to Rollbar
                command: |
                    curl https://api.rollbar.com/api/1/deploy/ \
                    -F access_token='8c5b36a9377c42059e5bb2fca54d8b8f' \
                    -F environment=staging \
                    -F revision=$CIRCLE_SHA1 \
                    -F local_username=$CIRCLE_USERNAME 
    rollbarProduction:
        machine:
            enabled: true
        steps:
            - run:
                name: Deployment notification to Rollbar
                command: |
                    curl https://api.rollbar.com/api/1/deploy/ \
                    -F access_token='8c5b36a9377c42059e5bb2fca54d8b8f' \
                    -F environment=production \
                    -F revision=$CIRCLE_SHA1 \
                    -F local_username=$CIRCLE_USERNAME 
            
workflows:
  version: 2
  build_and_deploy_staging:
    jobs:
      - build
      - upload:
          requires:
            - build     
          filters:
            branches:
              only: 
                - develop
                - master
      - deployStaging:
          requires:
            - upload
      - rollbarStaging:
          requires:
            - deployStaging

    

